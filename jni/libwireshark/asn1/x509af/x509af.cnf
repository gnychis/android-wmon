# x509.cnf
# X509 conformation file

# $Id: x509af.cnf 32532 2010-04-21 10:14:04Z stig $

#.IMPORT ../x509ce/x509ce-exp.cnf
#.IMPORT ../x509if/x509if-exp.cnf
#.IMPORT ../x509sat/x509sat-exp.cnf

#.MODULE_EXPORTS
EXTENSION
ACPathData
AlgorithmIdentifier
AttCertValidityPeriod
AttributeCertificate
AttributeCertificateAssertion
AttributeCertificateInfo
AttributeCertificationPath
Certificate
Certificate_PDU
Certificates
CertificateList
CertificatePair
CertificateSerialNumber
CertificationPath
CrossCertificates
Extension
Extensions
ForwardCertificationPath
IssuerSerial
SubjectPublicKeyInfo
Time
Validity
Version

#.PDU

#.REGISTER
Certificate				B "2.5.4.36" "id-at-userCertificate"
Certificate				B "2.5.4.37" "id-at-cAcertificate"
CertificateList			B "2.5.4.38" "id-at-authorityRevocationList"
CertificateList			B "2.5.4.39" "id-at-certificateRevocationList"
CertificatePair			B "2.5.4.40" "id-at-crossCertificatePair"
AttributeCertificate	B "2.5.4.58" "id-at-attributeCertificate"
CertificateList			B "2.5.4.59" "id-at-attributeCertificateRevocationList"

DSS-Params				B "1.2.840.10040.4.1" "id-dsa"

#.TYPE_RENAME
AttributeCertificateInfo/subject	InfoSubject
AttributeCertificateAssertion/subject	AssertionSubject

#.FIELD_RENAME
AttributeCertificateInfo/issuer		issuerName	
AttributeCertificateInfo/subject info_subject
AttributeCertificateAssertion/subject assertion_subject

AttributeCertificateAssertion/issuer assertionIssuer

AttributeCertificateInfo/subject/subjectName      infoSubjectName
AttributeCertificateAssertion/subject/subjectName assertionSubjectName
IssuerSerial/issuer			issuerName	
CertificateList/signedCertificateList/revokedCertificates/_item/userCertificate		revokedUserCertificate
#.END

#.FN_PARS AlgorithmIdentifier/algorithmId
  FN_VARIANT = _str  HF_INDEX = hf_x509af_algorithm_id  VAL_PTR = &algorithm_id

#.FN_BODY AlgorithmIdentifier/algorithmId
  const char *name;

  %(DEFAULT_BODY)s

  if(algorithm_id) {
    name = oid_resolved_from_string(algorithm_id);

    proto_item_append_text(tree, " (%%s)", name ? name : algorithm_id); 
  }

#.FN_BODY AlgorithmIdentifier/parameters
  offset=call_ber_oid_callback(algorithm_id, tvb, offset, actx->pinfo, tree);

#.FN_PARS Extension/extnId
  FN_VARIANT = _str  HF_INDEX = hf_x509af_extension_id  VAL_PTR = &extension_id

#.FN_BODY Extension/extnId
  const char *name;

  %(DEFAULT_BODY)s

  if(extension_id) {
    name = oid_resolved_from_string(extension_id);

    proto_item_append_text(tree, " (%%s)", name ? name : extension_id);
  }

#.FN_BODY Extension/extnValue
  gint8 class;
  gboolean pc, ind;
  gint32 tag;
  guint32 len;
  /* skip past the T and L  */
  offset = dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &class, &pc, &tag);
  offset = dissect_ber_length(actx->pinfo, tree, tvb, offset, &len, &ind);
  offset=call_ber_oid_callback(extension_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY SubjectName

  const char* str;
  %(DEFAULT_BODY)s

  str = x509if_get_last_dn();
  proto_item_append_text(proto_item_get_parent(tree), " (%%s)", str?str:"");

#.END
