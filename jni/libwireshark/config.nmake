# $Id: config.nmake 36596 2011-04-12 17:53:23Z wmeier $

# Some more information about the settings in this file can be found in
# the file README.windows and the Developer's Guide (available online).

##### Target platform #####
# Only "win32" and "win64" are valid (for now).
# This can be defined in the system environment.
!IFNDEF WIRESHARK_TARGET_PLATFORM
WIRESHARK_TARGET_PLATFORM=win32
!ENDIF

##### Versions #####

# The current Wireshark version
# It's highly recommended to leave MAJOR/MINOR/MICRO unchanged
VERSION_MAJOR=1
VERSION_MINOR=5
VERSION_MICRO=2
VERSION_BUILD=0
# It's recommended to change VERSION_EXTRA for your own custom builds
# e.g. "-SVN-12345"
VERSION_EXTRA=

# The version of the wiretap library (recommended: leave unchanged)
WTAP_VERSION_MAJOR=0
WTAP_VERSION_MINOR=3
WTAP_VERSION_MICRO=1



##### Directories #####

#
# Base directory, where your libraries reside, which are needed to
# compile the sources. This setting is used only inside this file.
#
WIRESHARK_LIBS=C:\wireshark-$(WIRESHARK_TARGET_PLATFORM)-libs

#
# Base directory, where your programs reside.
# This setting is used only inside this file.
#
PROGRAM_FILES=$(PROGRAMFILES)

#
# Location of the "tools" directory. This affects HTML2TXT below and should
# be overridden by makefiles in any subdirectories that use HTML2TXT.
!IFNDEF TOOLS_DIR
TOOLS_DIR=tools
!ENDIF

#
# Machine type for the compiler and linker
# TARGET_MACHINE (Used for link /MACHINE) should be one of "X86" or "X64"
# (sorry ARM, Alpha, MIPS, and Itanium fans).
# CPU (Used by win32.mak) should be one of "i386" or "AMD64".
# PROCESSOR_ARCHITECTURE (Used for redistributable packages and
# manifests) should be one of "x86" or "amd64".
!if "$(WIRESHARK_TARGET_PLATFORM)" == "win32"
TARGET_MACHINE=x86
CPU=i386
PROCESSOR_ARCHITECTURE=x86
!else if "$(WIRESHARK_TARGET_PLATFORM)" == "win64"
TARGET_MACHINE=x64
CPU=AMD64
PROCESSOR_ARCHITECTURE=amd64
!else
!error Your mysterious moon-man architecture "$(WIRESHARK_TARGET_PLATFORM)" frightens and confuses us.
!endif


##### Microsoft Visual C / Studio Variant #####
# For the different Studios, see: http://en.wikipedia.org/wiki/Microsoft_Visual_Studio
# only one of the following MSVC_VARIANT settings should be used
# BTW: The "Microsoft Visual C++ Toolkit 2003" DOESN'T WORK for WS!

# "Microsoft Visual Studio 6.0"
# Visual C++ 6.0, _MSC_VER 1200, msvcrt.dll (version 6)
#MSVC_VARIANT=MSVC6

# "Microsoft Visual Studio .NET (2002)"
# Visual C++ 7.0, _MSC_VER 1300, msvcr70.dll
#MSVC_VARIANT=MSVC2002

# "Microsoft .Net Framework SDK Version 1.0"
# needs additional Platform SDK installation
# Visual C++ 7.0, _MSC_VER 1300, msvcr70.dll
#MSVC_VARIANT=DOTNET10

# "Microsoft Visual Studio .NET 2003"
# Visual C++ 7.1, _MSC_VER 1310, msvcr71.dll
#MSVC_VARIANT=MSVC2003

# "Microsoft .Net Framework SDK Version 1.1"
# needs additional Platform SDK installation
# Visual C++ 7.1, _MSC_VER 1310, msvcr71.dll
#MSVC_VARIANT=DOTNET11

# "Microsoft Visual Studio 2005"
# Visual C++ 8.0, _MSC_VER 1400, msvcr80.dll
#MSVC_VARIANT=MSVC2005

# "Microsoft Visual C++ 2005 Express Edition"
# needs additional Platform SDK installation
# Visual C++ 8.0, _MSC_VER 1400, msvcr80.dll
#MSVC_VARIANT=MSVC2005EE

# "Microsoft .Net Framework 2.0 SDK"
# needs additional Platform SDK installation
# Visual C++ 8.0, _MSC_VER 1400, msvcr80.dll
#MSVC_VARIANT=DOTNET20

# "Microsoft Visual Studio 2008"
# Visual C++ 9.0, _MSC_VER 1500, msvcr90.dll
#MSVC_VARIANT=MSVC2008

# "Microsoft Visual C++ 2008 Express Edition"
# Visual C++ 9.0, _MSC_VER 1500, msvcr90.dll
#MSVC_VARIANT=MSVC2008EE

# "Microsoft Visual Studio 2010"
# Visual C++ 10.0, _MSC_VER 1600, msvcr100.dll
#MSVC_VARIANT=MSVC2010

# "Microsoft Visual C++ 2010 Express Edition"
# Visual C++ 10.0, _MSC_VER 1600, msvcr100.dll
#MSVC_VARIANT=MSVC2010EE

# The default if we haven't set a system environment variable or
# uncommented an entry above.
!IFNDEF MSVC_VARIANT
MSVC_VARIANT=MSVC2008
!ENDIF

#
# Optional: To compile some time critical code from assembler instead of C
#
# If you have the NASM compiler, set this to the NASM executable.
# http://nasm.sourceforge.net/
#
# If you don't have NASM, comment this line out, so that NASM
# isn't defined.
#
NASM=$(WIRESHARK_LIBS)\nasm-2.09.08\nasm.exe

#
# Optional: the Python library enables scripting support.
#
# If you don't have the Python library, comment this line out, so that
# PYTHON_EMBED isn't defined.
#
# NOTE: The Python library must have been compiled with the same
# compiler (MSVC_VARIANT) as Wireshark. Known python.org Python
# CRT versions:
#
# Python version    CRT (32-bit)    CRT (64-bit)
# 2.4.4             7.1             ?
# 2.6.1             9.0             ?
# 2.6.2                             9.0
#
# If you versions of Python and Visual C++ use different CRTs
# comment this out.
#
# XXX The DLL path in epan/wspython/wspy_libws.py likely needs to
# be fixed before this is enabled by default.
#PYTHON_EMBED=1

#
# Optional: the Python interpreter is used as part of the buildsystem
#
# This will override the automatic detection below.
#PYTHON_VER=27
#PYTHON_DIR=C:\Python$(PYTHON_VER)

#
# If you don't have the native Python package installed, you can use
# the Cygwin version (not recommended)
#
#PYTHON=env python

# Santity check: native vs Cygwin Python options
!IF DEFINED(PYTHON) && DEFINED(PYTHON_DIR)
!ERROR PYTHON and PYTHON_DIR cannot be specified at the same time
!ENDIF

# Find native Python automatically if PYTHON(_DIR) wasn't defined
!IF !DEFINED(PYTHON) && !DEFINED(PYTHON_DIR)
!IF EXIST(c:\Python27\python.exe)
PYTHON_VER=27
!ELSE IF EXIST(c:\Python26\python.exe)
PYTHON_VER=26
!ELSE IF EXIST(c:\Python25\python.exe)
PYTHON_VER=25
!ELSE IF EXIST(c:\Python24\python.exe)
PYTHON_VER=24
!ENDIF

!IF DEFINED(PYTHON_VER)
PYTHON_DIR=C:\Python$(PYTHON_VER)
!ENDIF
!ENDIF

!IF DEFINED(PYTHON_DIR)
PYTHON="$(PYTHON_DIR)\python.exe"
PATH=$(PYTHON_DIR);$(PATH)
!ENDIF

!if "$(WIRESHARK_TARGET_PLATFORM)" == "win32"
##### Win32 Libraries #####
#
# Mandatory: GLib settings
#
# Please note: Since Wireshark release 1.0.0, we no longer support GLib1.x
#
GLIB_VERSION=2.0

#
# Mandatory: GLib, GTK & related library settings
#
# Please note: Since Wireshark release 1.0.0, we no longer support GTK1.x
#
# If you want building with GTK+, set GTK_DIR to the pathname of the
# directory in which the "include" and "lib" directories reside.
#
GTK_DIR=$(WIRESHARK_LIBS)\gtk2
# These macros are used by the nsis installer script and by the install target.
PNG_DLL=libpng14-14.dll
FREETYPE_DLL=freetype6.dll
FONTCONFIG_DLL=libfontconfig-1.dll
EXPAT_DLL=libexpat-1.dll
INTL_DLL=intl.dll
# This macro is used by the setup target.
GTK_PKG=2.16.6-20100912
#GTK_PKG=2.22.0-20101016

#
# Mandatory: Version numbers of GTK and pango.
#
# (MAJOR + MINOR Version number but without MICRO version number)
# These macros are used by the nsis installer script and by the setup target.
#
GTK_INST_VERSION=2.16
#GTK_INST_VERSION=2.22

#
# Optional: WinPcap developer's pack to capture network traffic.
#
# If you have the WinPcap developer's pack (at least version 3.0),
# set this to the directory in which the WinPcap developer's pack resides.
#
# If you don't have the WPdpack, comment this line out, so that
# PCAP_DIR isn't defined.
#
PCAP_DIR=$(WIRESHARK_LIBS)\WPdpack
# This macro is used by the nsis installer script, by the u3/portable apps and by the setup target.
PCAP_VERSION=4_1_2

#
# Optional: WinPcap remote capture support and new API
# (pcap_open(), pcap_findalldevs_ex(), etc.)
#
PCAP_REMOTE=1

#
# Optional: The ZLib enables unzipping of gzip compressed capture files
# "on the fly".
#
# If you have Zlib, set this to directory in which the Zlib headers
# and .lib file are stored.
#
# If you don't have Zlib, comment this line out, so that ZLIB_DIR isn't
# defined.
# EXperimental only use zlib 1.2.5 on win32 for now
ZLIB_DIR=$(WIRESHARK_LIBS)\zlib125

#
# Optional: the ADNS library enables asynchronous (nonblocking) DNS
# name resolvings.
#
# If you have GNU ADNS, set this to the directory in which the GNU ADNS
# .lib file is stored.
#
# If you don't have GNU ADNS, comment this line out, so that ADNS_DIR
# isn't defined.
#
# If C_ARES_DIR is defined below, it will override this setting.
#
#ADNS_DIR=$(WIRESHARK_LIBS)\adns-1.0-win32-05ws

#
# Optional: the c-ares library enables asynchronous (nonblocking) DNS
# name resolvings.
#
# If you have c-ares, set this to the directory in which the c-ares
# .lib file is stored. Setting this will override ADNS_DIR above. You
# can't have both.
#
# If you're using Visual C++ 6.0, you'll have to use a platform SDK that
# defines socklen_t, such as Windows Server 2003 PSDK.
#
# If you don't have c-ares, comment this line out, so that C_ARES_DIR
# isn't defined.
#
C_ARES_PKG=1.7.1

#
# Optional: the PCRE (Perl Compatible Regular Expressions) library
# enables regular expressions for display filters.
#
# If you have the PCRE library, set this to the directory in which
# the GNUWIN32 pcre-lib package is stored.
#
# If you don't have PCRE, comment this line out, so that PCRE_DIR
# isn't defined.
#
#PCRE_DIR=$(WIRESHARK_LIBS)\pcre-7.0

#
# Optional: the GNUTLS library enables ssl decryption.
#
# If you have the GNUTLS library, set this to the package version.
#
# If you don't have GNUTLS, comment this line out, so that GNUTLS_PKG
# isn't defined.
#
# Platform SDK conflicts with openssl.h header
GNUTLS_PKG=2.10.3-1.11

#
# Optional: the KFW library enables kerberos/sasl/dcerpc decryption.
#
# If you have the kerberos for windows (mit) library, set this to the
# directory where the kfw package is stored.
#
# If you don't have KFW, comment this line out, so that KFW_DIR
# isn't defined.
#
KFW_DIR=$(WIRESHARK_LIBS)\kfw-3-2-2-i386-ws-vc6

#
# Optional: the Nettle library enables ??? decryption.
#
# If you have the Nettle encryption library, set this to the
# directory in which the nettle package is stored.
#
# If you don't have Nettle, comment this line out, so that NETTLE_DIR
# isn't defined.
#
# NETTLE_DIR=$(WIRESHARK_LIBS)\nettle-1.10

#
# Optional: the LUA library enables scripting support.
#
# If you have the LUA library, set this to the directory in which
# the LUA package is stored.
#
# If you don't have LUA, comment this line out, so that LUA_DIR
# isn't defined.
#
LUA_DIST=5_1_4_Win32_dll6
LUA_DIR=$(WIRESHARK_LIBS)\lua5.1.4

#
# Optional: the PORTAUDIO library enables audio output for RTP streams.
#
# If you have the PORTAUDIO library (used for rtp_player), set this to
# the directory in which the PORTAUDIO library is stored.
#
# If you don't have PORTAUDIO, comment this line out, so that
# PORTAUDIO_DIR isn't defined.
#
#PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v18_1
PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v19_2

#
# Version number of PortAudio
#
#PORTAUDIO_VERSION=18
PORTAUDIO_VERSION=19

#
# Optional: AirPcap developer's pack to capture wireless network traffic
# incl. 802.11 management frames.
#
# If you have the AirPcap developer's pack, set this to the directory
# in which the AirPcap developer's pack resides.
#
# If you don't have the AirPcap developer's pack, comment this line out,
# so that AIRPCAP_DIR isn't defined.
#
AIRPCAP_DIR=$(WIRESHARK_LIBS)\AirPcap_Devpack_4_1_0_1622\AirPcap_Devpack

#
# Optional: LIBSMI, System Management Interface
#
# Used for oid-name resolution for SNMP and other protocols
#
SMI_DIR=$(WIRESHARK_LIBS)\libsmi-0.4.8

#
# Optional: GeoIP, IP address database lookups
#
# Used to map IP addresses to MaxMind GeoIP database entries
#
# GeoIP requires IPv6 definitions that don't ship with Visual C++ 6.0.
# However, the Microsoft Platform SDK for Windows Server 2003 R2 provides
# these definitions. The SDK's SetEnv.bat script defines INETSDK.
!IF "$(MSVC_VARIANT)" != "MSVC6" || DEFINED(INETSDK)
GEOIP_DIR=$(WIRESHARK_LIBS)\GeoIP-1.4.6-win32ws\libGeoIP
!ENDIF

!else
##### Win64 Libraries #####
#
# Mandatory: GLib settings
#
# Please note: Since Wireshark release 1.0.0, we no longer support GLib1.x
#
GLIB_VERSION=2.0

#
# Mandatory: GLib, GTK & related library settings
#
# Please note: Since Wireshark release 1.0.0, we no longer support GTK1.x
#
# If you want building with GTK+, set GTK_DIR to the pathname of the
# directory in which the "include" and "lib" directories reside.
#
GTK_DIR=$(WIRESHARK_LIBS)\gtk2
# These macros are used by the nsis installer script and by the install target.
PNG_DLL=libpng14-14.dll
#TIFF_DLL=libtiff-3.dll
#JPEG_DLL=libjpeg-7.dll
FREETYPE_DLL=libfreetype-6.dll
FONTCONFIG_DLL=libfontconfig-1.dll
EXPAT_DLL=libexpat-1.dll
INTL_DLL=libintl-8.dll

# These macros are used by the setup target.
GTK_PKG=2.16.6-20100912
#GTK_PKG=2.22.0-20101016

#
# Mandatory: Version numbers of GTK and pango.
#
# (MAJOR + MINOR Version number but without MICRO version number)
# These macros are used by the nsis installer script and by the setup target.
#
GTK_INST_VERSION=2.16
#GTK_INST_VERSION=2.22

#
# Optional: WinPcap developer's pack to capture network traffic.
#
# If you have the WinPcap developer's pack (at least version 3.0),
# set this to the directory in which the WinPcap developer's pack resides.
#
# If you don't have the WPdpack, comment this line out, so that
# PCAP_DIR isn't defined.
#
PCAP_DIR=$(WIRESHARK_LIBS)\WPdpack
# This macro is used by the nsis installer script, by the u3/portable apps and by the setup target.
PCAP_VERSION=4_1_2

#
# Optional: WinPcap remote capture support and new API
# (pcap_open(), pcap_findalldevs_ex(), etc.)
#
PCAP_REMOTE=1

#
# Optional: The ZLib enables unzipping of gzip compressed capture files
# "on the fly".
#
# If you have Zlib, set this to directory in which the Zlib headers
# and .lib file are stored.
#
# If you don't have Zlib, comment this line out, so that ZLIB_DIR isn't
# defined.
#
ZLIB_DIR=$(WIRESHARK_LIBS)\zlib123

#
# Optional: the ADNS library enables asynchronous (nonblocking) DNS
# name resolvings.
#
# If you have GNU ADNS, set this to the directory in which the GNU ADNS
# .lib file is stored.
#
# If you don't have GNU ADNS, comment this line out, so that ADNS_DIR
# isn't defined.
#
# If C_ARES_DIR is defined below, it will override this setting.
#
#ADNS_DIR=$(WIRESHARK_LIBS)\adns-1.0-win32-05ws

#
# Optional: the c-ares library enables asynchronous (nonblocking) DNS
# name resolvings.
#
# If you have c-ares, set this to the directory in which the c-ares
# .lib file is stored. Setting this will override ADNS_DIR above. You
# can't have both.
#
# If you're using Visual C++ 6.0, you'll have to use a platform SDK that
# defines socklen_t, such as Windows Server 2003 PSDK.
#
# If you don't have c-ares, comment this line out, so that C_ARES_DIR
# isn't defined.
#
C_ARES_PKG=1.7.1

#
# Optional: the PCRE (Perl Compatible Regular Expressions) library
# enables regular expressions for display filters.
#
# If you have the PCRE library, set this to the directory in which
# the GNUWIN32 pcre-lib package is stored.
#
# If you don't have PCRE, comment this line out, so that PCRE_DIR
# isn't defined.
#
#PCRE_DIR=$(WIRESHARK_LIBS)\pcre-7.0

#
# Optional: the GNUTLS library enables ssl decryption.
#
# If you have the GNUTLS library, set this to the package version.
#
# If you don't have GNUTLS, comment this line out, so that GNUTLS_PKG
# isn't defined.
#
# Platform SDK conflicts with openssl.h header
GNUTLS_PKG=2.10.3-1.7

#
# Optional: the KFW library enables kerberos/sasl/dcerpc decryption.
#
# If you have the kerberos for windows (mit) library, set this to the
# directory where the kfw package is stored.
#
# If you don't have KFW, comment this line out, so that KFW_DIR
# isn't defined.
#
#KFW_DIR=$(WIRESHARK_LIBS)\kfw-3.2.2-ws1

#
# Optional: the Nettle library enables ??? decryption.
#
# If you have the Nettle encryption library, set this to the
# directory in which the nettle package is stored.
#
# If you don't have Nettle, comment this line out, so that NETTLE_DIR
# isn't defined.
#
# NETTLE_DIR=$(WIRESHARK_LIBS)\nettle-1.10

#
# Optional: the LUA library enables scripting support.
#
# If you have the LUA library, set this to the directory in which
# the LUA package is stored.
#
# If you don't have LUA, comment this line out, so that LUA_DIR
# isn't defined.
#
LUA_DIST=5_1_4_Win64_dll9
LUA_DIR=$(WIRESHARK_LIBS)\lua5.1.4

#
# Optional: the PORTAUDIO library enables audio output for RTP streams.
#
# If you have the PORTAUDIO library (used for rtp_player), set this to
# the directory in which the PORTAUDIO library is stored.
#
# If you don't have PORTAUDIO, comment this line out, so that
# PORTAUDIO_DIR isn't defined.
#
#PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v18_1
PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v19_2

#
# Version number of PortAudio
#
#PORTAUDIO_VERSION=18
PORTAUDIO_VERSION=19

#
# Optional: AirPcap developer's pack to capture wireless network traffic
# incl. 802.11 management frames.
#
# If you have the AirPcap developer's pack, set this to the directory
# in which the AirPcap developer's pack resides.
#
# If you don't have the AirPcap developer's pack, comment this line out,
# so that AIRPCAP_DIR isn't defined.
#
AIRPCAP_DIR=$(WIRESHARK_LIBS)\AirPcap_Devpack_4_1_0_1622\AirPcap_Devpack

#
# Optional: LIBSMI, System Management Interface
#
# Used for oid-name resolution for SNMP and other protocols
#
#SMI_DIR=$(WIRESHARK_LIBS)\libsmi-0.4.8

#
# Optional: GeoIP, IP address database lookups
#
# Used to map IP addresses to MaxMind GeoIP database entries
#
GEOIP_DIR=$(WIRESHARK_LIBS)\GeoIP-1.4.6-win64ws\libGeoIP

!endif

##### Tools #####

# Set the following mandatory commands to find the tools.
# The easiest way is to use the corresponding packages from cygwin.

# Set up the path to the cygwin binaries
CYGWIN_PATH=c:\cygwin\bin

# command for a shell (cygwin's bash package recommended)
SH_PROG=bash

# bash versions after 3.1.6 need the 'igncr' shell option to be able to
#  process scripts in windows 'native format' (dos crlf format).
# The following !IF results in the option being used only if it is available
#  since using it on bash version 3.1.6 (or earlier) is not required and
#  will cause an error message.
!if "$(SH_PROG)"=="bash" && [$(CYGWIN_PATH)\bash -c "set -o igncr" 2>nul: ] == 0
SH_FLAGS=-o igncr
!endif

SH=$(SH_PROG) $(SH_FLAGS)


# command for perl (cygwin's perl package recommended)
PERL=perl

# command for pod2man and pod2html
# (part of the perl package, usually leave these unchanged)
POD2MAN=$(SH) pod2man
POD2HTML=$(SH) pod2html

# command for lex/flexx (cygwin's flex recommended)
LEX=flex

# command for yacc/bison (cygwin's bison recommended)
YACC=bison

# Commands to convert UNIX line endings to DOS/Windows
UNIX2DOS=u2d
TEXTIFY=$(SH) $(TOOLS_DIR)/textify.sh

#
# Optional: To build the NSIS installer.
#
# If you have the NSIS package, set this to the NSIS executable.
#
# If you don't have NSIS, comment this line out, so that MAKENSIS
# isn't defined.
#
MAKENSIS="$(PROGRAM_FILES)\NSIS\makensis.exe"

#
# Optional: To build the NSIS PortableApps installer.
#
# If you have the NSIS Unicode package, set this to the NSIS Unicode executable.
#
# If you don't have NSIS Unicode, comment this line out, so that
# MAKENSIS_UNICODE isn't defined.
#
MAKENSIS_UNICODE="$(PROGRAM_FILES)\NSIS\Unicode\makensis.exe"

#
# Optional: To build the developers API documentation with doxygen and dot.
# Currently experimental, outdated and incomplete.
#
# You will have to download and install:
# Doxygen from: http://www.doxygen.org
# Graphviz from: http://www.research.att.com/sw/tools/graphviz/
#
# If you have doxygen, set this to the doxygen executable.
#
# If you don't want the developers documentation (or don't have the tools),
# comment this line out, so that DOXYGEN isn't defined.
#
#DOXYGEN="$(PROGRAM_FILES)/doxygen/bin/doxygen.exe"

#
# Recommended: Use the compressed html help format .chm as the Wireshark integrated help.
#
# The required htmlhelp.h and htmlhelp.lib should be included in MSVC_VARIANT > MSVC6.
#
# For MSVC_VARIANT == MSVC6 you will have to download and install the html help workshop from:
#
# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html
# /hwMicrosoftHTMLHelpDownloads.asp
#
# Then point HHC_DIR to the html help dir (where hhc.exe resides).
#
# If you don't want the online help (or don't have the tools),
# comment this line out, so that HHC_DIR isn't defined.
#
HHC_DIR=$(PROGRAM_FILES)/HTML Help Workshop

#
# Optional: To reduce the size of dlls and exes, which is especially useful for USB device distributions (U3, PortableApps)
#
# If you have the UPX package, set this to the upx.exe executable.
#
# UPX can be downloaded from:
#   http://upx.sourceforge.net/
#
# If you don't have UPX, or don't want to pack exes and dlls,
# comment this line out, so that UPX isn't defined.
#

UPX=$(WIRESHARK_LIBS)\upx303w\upx.exe

##### Flags, PATHs and Miscellaneous #####

# Santity check: Python embedding requires a valid PYTHON_DIR
!IF DEFINED(PYTHON_EMBED) && !DEFINED(PYTHON_DIR)
!ERROR PYTHON_EMBED requires that PYTHON_DIR is defined
!ENDIF

# "convert" the MSVC variant into the required MSC compiler version
!IF "$(MSVC_VARIANT)" == "MSVC6"
MSC_VER_REQUIRED=1200
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2002" || "$(MSVC_VARIANT)" == "DOTNET10"
MSC_VER_REQUIRED=1300
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2003" || "$(MSVC_VARIANT)" == "DOTNET11"
MSC_VER_REQUIRED=1310
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005" || "$(MSVC_VARIANT)" == "MSVC2005EE" || "$(MSVC_VARIANT)" == "DOTNET20"
MSC_VER_REQUIRED=1400
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2008" ||  "$(MSVC_VARIANT)" == "MSVC2008EE"
MSC_VER_REQUIRED=1500
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2010" ||  "$(MSVC_VARIANT)" == "MSVC2010EE"
MSC_VER_REQUIRED=1600
!ELSE
!ERROR MSVC_VARIANT unknown
!ENDIF

## Manifest processing is not needed for VC10 (Visual Studio 2010 C)
## See: http://msdn.microsoft.com/en-us/library/dd293574.aspx
!IF ($(MSC_VER_REQUIRED) >= 1400) && ($(MSC_VER_REQUIRED) < 1600)
MANIFEST_INFO_REQUIRED=1
!ENDIF

# Compiler flags:
# /W3                               Warning level 3 (0 less - 4 most, 1 default)
# /Zi                               Create .pdb file for debugging
# /MD                               Use "multithread- and DLL-specific version" of run-time libraries
#                                    msvc documentation states that /MD causes _MT and _DLL to be defined
#                                    See: http://msdn.microsoft.com/en-us/library/2kzt1wy3%28v=VS.90%29.aspx
# /D_CRT_SECURE_NO_DEPRECATE        Don't warn for "insecure" calls,
#                                     see MSDN "Security Enhancements in the CRT"
# /D_CRT_NONSTDC_NO_DEPRECATE       Don't warn for "Deprecated CRT Functions" as MSDN calls this
# /D_BIND_TO_CURRENT_CRT_VERSION=1  Make sure our CRT and manifest versions match
#                                    (http://msdn.microsoft.com/en-us/library/cc664727.aspx)
# /DWIN32_LEAN_AND_MEAN             Don't include unnecessary Windows include files (see windows.h)
# /MANIFEST:no                      Don't create a SxS manifest. Makes sure our plugins don't load
#                                     a second copy of the CRT.
#
##Note: LOCAL_CFLAGS are flags used for *all* compilations
##      STANDARD_CFLAGS (see below) are flags used just for *Wireshark* compilations
!IF     "$(MSVC_VARIANT)" == "MSVC6"      || \
        "$(MSVC_VARIANT)" == "MSVC2002"   || \
        "$(MSVC_VARIANT)" == "DOTNET10"   || \
        "$(MSVC_VARIANT)" == "MSVC2003"   || \
        "$(MSVC_VARIANT)" == "DOTNET11"
LOCAL_CFLAGS=/Zi /W3 /MD /DWIN32_LEAN_AND_MEAN /DMSC_VER_REQUIRED=$(MSC_VER_REQUIRED)

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005"   || \
        "$(MSVC_VARIANT)" == "MSVC2005EE" || \
        "$(MSVC_VARIANT)" == "DOTNET20"   || \
        "$(MSVC_VARIANT)" == "MSVC2008"   || \
        "$(MSVC_VARIANT)" == "MSVC2008EE" || \
        "$(MSVC_VARIANT)" == "MSVC2010"   || \
        "$(MSVC_VARIANT)" == "MSVC2010EE"
LOCAL_CFLAGS=/Zi /W3 /MD /DWIN32_LEAN_AND_MEAN /DMSC_VER_REQUIRED=$(MSC_VER_REQUIRED) \
	     /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE

!IF "$(WIRESHARK_TARGET_PLATFORM)" != "win64"
LOCAL_CFLAGS=$(LOCAL_CFLAGS) /D_BIND_TO_CURRENT_CRT_VERSION=1
!ENDIF

# Additional compiler warnings to be treated as "Level 3"
#  when compiling Wireshark sources. (Selected from "level 4" warnings).
## 4295: array is too small to include a terminating null character
WARNINGS_CFLAGS=/w34295

!ELSE
!ERROR MSVC_VARIANT unknown
!ENDIF

# http://msdn.microsoft.com/en-us/library/bb385193.aspx
# /MP               Compiles multiple source files by using multiple processes
# /MP[processMax]   If you omit the processMax argument, the compiler retrieves the number of effective processors
#                   on your computer from the operating system, and creates a process for each processor.
#
# The following compiler options and language features that are incompatible with the /MP option:
#
# * #import preprocessor directive
# * /E, /EP
# * /Gm
# * /showIncludes
# * /Yc
#
!IF     "$(MSVC_VARIANT)" == "MSVC2008"   || \
        "$(MSVC_VARIANT)" == "MSVC2008EE" || \
        "$(MSVC_VARIANT)" == "MSVC2010"   || \
        "$(MSVC_VARIANT)" == "MSVC2010EE"
LOCAL_CFLAGS= $(LOCAL_CFLAGS) /MP
!ENDIF

# Optional: Static analysis. Only supported in the full-frontal MSVC editions.
# http://msdn.microsoft.com/en-us/library/ms182025.aspx

!IFDEF ENABLE_CODE_ANALYSIS
#LOCAL_CFLAGS= $(LOCAL_CFLAGS) /analyze:WX-
!ENDIF

#STANDARD_CFLAGS are flags used for *Wireshark* compiles (not stuff like lemon, etc)
STANDARD_CFLAGS=-DHAVE_CONFIG_H -D_U_="" $(LOCAL_CFLAGS) $(WARNINGS_CFLAGS)

#Comment out the following if warnings are not to be treated as errors
WARNINGS_ARE_ERRORS=-WX

## XXX: _MT and _DLL are defined when /MD is used so CVARSDLL is apparently unneeded
##CVARSDLL=-D_MT -D_DLL

# Linker flags:
# /DEBUG  generate debug info
# /PROFILE generate map file(s) for profiling
# /DEFAULTLIB:xxx use xxx as the standard C library
# /NODEFAULTLIB:xxx don't use xxx as the standard C library
#
LOCAL_LDFLAGS=/DEBUG /MACHINE:$(TARGET_MACHINE)
DLL_LDFLAGS =
!IFDEF MANIFEST_INFO_REQUIRED
DLL_LDFLAGS = /MANIFEST:no
!ENDIF

# Enable ASLR. Requires VS2008 or later.
# http://blogs.msdn.com/b/vcblog/archive/2009/05/21/dynamicbase-and-nxcompat.aspx
# DEP is handled in init_process_policies()

# ASLR http://msdn.microsoft.com/en-us/library/bb384887.aspx
!IF $(MSC_VER_REQUIRED) >= 1500
LOCAL_LDFLAGS= $(LOCAL_LDFLAGS) /DYNAMICBASE
!ENDIF

PLUGIN_LDFLAGS = /NOLOGO /INCREMENTAL:no $(LOCAL_LDFLAGS) $(DLL_LDFLAGS)

#
# According to http://bugs.wireshark.org/bugzilla/show_bug.cgi?id=403
# XCOPY under Windows NT doesn't support the "/Y" flag.  This works
# around that bug.
# XXX - This apparently doesn't work for some versions of nmake:
# http://support.microsoft.com/default.aspx?scid=kb;en-us;86814
# It looks like we'll have to call "set copycmd=/y" before we run xcopy.
COPYCMD=/y

#
# If you don't want to build libwireshark.dll, you should comment out the
# following line. (Note: for plugin support this option must stay activated)
ENABLE_LIBWIRESHARK=USE

#
# install (debug) directory for Wireshark (relative to your source dir)
INSTALL_DIR=wireshark-gtk2



##### C-Runtime Redistributable #####
#
# The C-Runtime since Version 7 must be shipped together with
# the program installer, to avoid missing msvcr*.dll files on
# the target machine.
#
# The location of these files differ on the various compiler
# packages, the following will use the default paths depending
# on the package version.
#
!IF "$(MSVC_VARIANT)" == "MSVC6"
# msvcrt.dll will already be available on target machines - nothing additional to install

!ELSEIF "$(WIRESHARK_TARGET_PLATFORM)" == "win64"
# We're not creating portable packages and therefore don't have to worry about
# "deploying using xcopy"
VCREDIST_EXE=$(WIRESHARK_LIBS)\vcredist_$(TARGET_MACHINE).exe

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2002"
# you probably need to tweak this directory if you don't use the professional edition!
MSVCR_DLL=$(PROGRAM_FILES)\Microsoft Visual Studio .NET\Visual Studio .NET Professional - English\msvcr70.dll

!ELSEIF "$(MSVC_VARIANT)" == "DOTNET10"
# no redistributable available for this package!

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2003"
# you probably need to tweak this directory if you don't use the professional edition!
MSVCR_DLL=$(PROGRAM_FILES)\Microsoft Visual Studio .NET 2003\Visual Studio .NET Professional 2003 - English\msvcr71.dll

!ELSEIF "$(MSVC_VARIANT)" == "DOTNET11"
# no redistributable available for this package!

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005"
MSVCR_DLL=$(PROGRAM_FILES)\Microsoft Visual Studio 8\VC\redist\$(PROCESSOR_ARCHITECTURE)\Microsoft.VC80.CRT\*.*

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005EE" || "$(MSVC_VARIANT)" == "DOTNET20" || "$(MSVC_VARIANT)" == "MSVC2008EE"
# you need to download the redistributable package vcredist_x86.exe from Microsoft first,
# and copy it to the lib folder!!!
VCREDIST_EXE=$(WIRESHARK_LIBS)\vcredist_$(TARGET_MACHINE).exe

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2008"
MSVCR_DLL=$(PROGRAM_FILES)\Microsoft Visual Studio 9.0\VC\redist\$(PROCESSOR_ARCHITECTURE)\Microsoft.VC90.CRT\*.*

!ELSEIF "$(MSVC_VARIANT)" == "MSVC2010EE"
# you need to download the redistributable package vcredist_x86.exe from Microsoft first,
# and copy it to the lib folder!!!
VCREDIST_EXE=$(WIRESHARK_LIBS)\vcredist_$(TARGET_MACHINE).exe
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2010"
MSVCR_DLL=$(PROGRAM_FILES)\Microsoft Visual Studio 10.0\VC\redist\$(TARGET_MACHINE)\Microsoft.VC100.CRT\*.*

!ELSE
!ERROR MSVC_VARIANT unknown
!ENDIF

!IF DEFINED(VCREDIST_EXE) && ! EXIST("$(VCREDIST_EXE)")
!ERROR Can't find $(VCREDIST_EXE). Have you downloaded it from Microsoft? \
See the developer's guide section "C-Runtime "Redistributable" files" for details how to get it
!ENDIF

##### Advanced: Docbook/XML documentation generation #####
# If you want to generate the Docbook/XML based docs (User's and Developer's
# Guide, ...), you'll need some additional tools / libraries compared to the
# rest of the build process.
#
# FOR DETAILED INSTRUCTIONS TO GENERATE THE DOCS, SEE: docbook\README.txt.
#
# If you don't call the Makefile.nmake in the docbook dir to generate the
# docs, the following settings in this section will have no effect.

# formatting objects processor executable
# Comment this out if you don't have fop installed or you don't want the docs
# in PDF format.
#
# You may want to install the FOP hyphenation patterns from
# http://offo.sourceforge.net/hyphenation/
!IFNDEF FOP
FOP=fop-0.95\fop.bat
!ENDIF

# Additional options to fop.
FOP_OPTS=-Xmx256m

# html help compiler
# Comment this out if you don't have hhc.exe or you don't want the docs in
# .chm format.
#
# Beware: hhc.exe is NOT part of the MSVC packages in HHC_DIR mentioned above,
# so you'll need to install the HTML Help Workshop for this.
HHC_EXE="$(HHC_DIR)\hhc.exe"

# html to text converter for text version of release notes, e.g. elinks.
# This could also be "lynx", or "true" if neither elinks nor lynx is installed
# (cygwin: lynx works, elinks not available, links and true doesn't produce output)
#HTML2TXT=elinks -dump -dump-width 72
##HTML2TXT=links -dump -width 72 ## XXX: Fails: For links -dump requires 'url' (filename) arg.
#HTML2TXT=lynx -dump -width=72 -nolist -stdin

!IFNDEF HTML2TXT
HTML2TXT=$(PYTHON) $(TOOLS_DIR)\html2text.py --width=72 --no-links
!ENDIF

# the XSL processor (part of cygwin's libxslt package)
XSLTPROC="xsltproc"

# the XML validator (part of cygwin's libxml2 package)
XMLLINT="xmllint"



##############################################################################
#
# You should not have to change anything below this comment.
# If you do, it's a deficiency in the Makefile.nmake files;
# either tell wireshark-dev@wireshark.org about it, including
# details of why you had to change it, or fix config.nmake
# and any Makefile.nmake files that need to be changed, and
# send us the patches, along with details of why the change
# was necessary.
#
##############################################################################

#
# The RC_VERSION should be comma-separated, not dot-separated,
# as per Graham Bloice's message in
#
#	http://www.ethereal.com/lists/ethereal-dev/200303/msg00283.html
#
# "The RC_VERSION variable in config.nmake should be comma separated.
# This allows the resources to be built correctly and the version
# number to be correctly displayed in the explorer properties dialog
# for the executables, and XP's tooltip, rather than 0.0.0.0."
#

VERSION=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_MICRO)$(VERSION_EXTRA)
RC_VERSION=$(VERSION_MAJOR),$(VERSION_MINOR),$(VERSION_MICRO),$(VERSION_BUILD)
PRODUCT_VERSION=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_MICRO).$(VERSION_BUILD)

WTAP_VERSION=$(WTAP_VERSION_MAJOR).$(WTAP_VERSION_MINOR).$(WTAP_VERSION_MICRO)
RC_WTAP_VERSION=$(WTAP_VERSION_MAJOR),$(WTAP_VERSION_MINOR),$(WTAP_VERSION_MICRO)

# GLib
GLIB_CFLAGS=/I$(GTK_DIR)\include\glib-$(GLIB_VERSION) \
	/I$(GTK_DIR)\lib\glib-$(GLIB_VERSION)\include
GLIB_LIBS=$(GTK_DIR)\lib\glib-$(GLIB_VERSION).lib \
	$(GTK_DIR)\lib\gmodule-$(GLIB_VERSION).lib \
	$(GTK_DIR)\lib\gobject-$(GLIB_VERSION).lib
GTHREAD_LIBS=$(GTK_DIR)\lib\gthread-$(GLIB_VERSION).lib

# GTK+
GTK_CFLAGS=$(GLIB_CFLAGS) /I$(GTK_DIR)\include\gtk-2.0 \
	/I$(GTK_DIR)\include\gdk-pixbuf-2.0 \
	/I$(GTK_DIR)\lib\gtk-2.0\include \
	/I$(GTK_DIR)\include\atk-1.0 \
	/I$(GTK_DIR)\include\cairo \
	/I$(GTK_DIR)\include\pango-1.0
GTK_LIBS=$(GTK_DIR)\lib\gtk-win32-2.0.lib \
	$(GTK_DIR)\lib\gdk-win32-2.0.lib \
	$(GTK_DIR)\lib\gdk_pixbuf-2.0.lib \
	$(GTK_DIR)\lib\pango-1.0.lib \
	$(GLIB_LIBS)

# 2.18 was no good(Theming problem)
!IF "$(GTK_INST_VERSION)" == "2.22" || "$(GTK_INST_VERSION)" == "2.16" || "$(GTK_INST_VERSION)" == "2.14"
GTK_LIB_DIR=2.10.0

!IFDEF PNG_DLL
NEED_LIBPNG_DLL=USE
!ENDIF
!IFDEF JPEG_DLL
NEED_LIBJPEG_DLL=USE
!ENDIF
!IFDEF TIFF_DLL
NEED_LIBTIFF_DLL=USE
!ENDIF
NEED_CAIRO_DLL=USE
# Pango >=1.24.5 Needs these:
NEED_FREETYPE_DLL=USE
NEED_FONTCONFIG_DLL=USE
NEED_EXPAT_DLL=USE

GTK_WIMP_DLLSRC_DIR=$(GTK_DIR)\lib\gtk-2.0\2.10.0\engines
GTK_WIMP_DLLDST_DIR=lib\gtk-2.0\2.10.0\engines
GTK_WIMP_RCSRC_DIR=$(GTK_DIR)\share\themes\MS-Windows\gtk-2.0
GTK_WIMP_RCDST_DIR=etc\gtk-2.0
!ELSE
!ERROR ? Unknown or invalid GTK_INST_VERSION
!ENDIF


!IFDEF AIRPCAP_DIR
AIRPCAP_CONFIG=^#define HAVE_AIRPCAP 1
AIRPDCAP_CONFIG=^#define HAVE_AIRPDCAP 1
#AIRPCAP_CFLAGS=/I$(AIRPCAP_DIR)\include
!ELSE
AIRPCAP_CONFIG=
AIRPDCAP_CONFIG=
!ENDIF

!IFDEF PCAP_DIR
# Nmake uses carets to escape special characters
WINPCAP_CONFIG=^#define HAVE_LIBPCAP 1
#
# This requires that, if you're *building* Wireshark, you have
# the most recent WinPcap's development package.  If, at *run*
# time, an older version of WinPcap, missing some routines,
# is found, we work around that.
#
PCAP_FINDALLDEVS_CONFIG=^#define HAVE_PCAP_FINDALLDEVS 1
PCAP_DATALINK_NAME_TO_VAL_CONFIG=^#define HAVE_PCAP_DATALINK_NAME_TO_VAL 1
PCAP_DATALINK_VAL_TO_NAME_CONFIG=^#define HAVE_PCAP_DATALINK_VAL_TO_NAME 1
PCAP_DATALINK_VAL_TO_DESCRIPTION_CONFIG=^#define HAVE_PCAP_DATALINK_VAL_TO_DESCRIPTION 1
# PCAP_BREAKLOOP won't have any benefit on Win32, but breaks compatibility with 3.0
PCAP_BREAKLOOP_CONFIG=
PCAP_LIST_DATALINKS_CONFIG=^#define HAVE_PCAP_LIST_DATALINKS 1
PCAP_FREE_DATALINKS_CONFIG=^#define HAVE_PCAP_FREE_DATALINKS 1
PCAP_SET_DATALINK_CONFIG=^#define HAVE_PCAP_SET_DATALINK 1
PCAP_OPEN_DEAD_CONFIG=^#define HAVE_PCAP_OPEN_DEAD 1
BPF_IMAGE_CONFIG=^#define HAVE_BPF_IMAGE 1
!ELSE
# no WpdPack installed
WINPCAP_CONFIG=
PCAP_FINDALLDEVS_CONFIG=
PCAP_DATALINK_NAME_TO_VAL_CONFIG=
PCAP_DATALINK_VAL_TO_NAME_CONFIG=
PCAP_DATALINK_VAL_TO_DESCRIPTION_CONFIG=
PCAP_BREAKLOOP_CONFIG=
PCAP_LIST_DATALINKS_CONFIG=
PCAP_FREE_DATALINKS_CONFIG=
PCAP_SET_DATALINK_CONFIG=
PCAP_OPEN_DEAD_CONFIG=
BPF_IMAGE_CONFIG=
!ENDIF

!IF DEFINED(PCAP_DIR) && DEFINED(PCAP_REMOTE)
PCAP_HAVE_REMOTE_CONFIG=^#define HAVE_REMOTE 1
PCAP_REMOTE_CONFIG=^#define HAVE_PCAP_REMOTE 1
PCAP_OPEN_CONFIG=^#define HAVE_PCAP_OPEN 1
PCAP_SETSAMPLING_CONFIG=^#define HAVE_PCAP_SETSAMPLING 1
!ELSE
PCAP_HAVE_REMOTE_CONFIG=
PCAP_REMOTE_CONFIG=
PCAP_OPEN_CONFIG=
PCAP_SETSAMPLING_CONFIG=
!ENDIF

!IFDEF ZLIB_DIR
ZLIB_PATH=$(ZLIB_DIR)
ZLIB_CFLAGS=/I$(ZLIB_DIR)\include
ZLIB_LIBS=$(ZLIB_DIR)\lib\zdll.lib
ZLIB_DLL=$(ZLIB_DIR)\zlib1.dll
# Nmake uses carets to escape special characters
ZLIB_CONFIG=^#define HAVE_LIBZ 1
ZLIB_GZCLEARERR_CONFIG=^#define HAVE_GZCLEARERR 1
!else
ZLIB_CFLAGS=
ZLIB_LIBS=
ZLIB_DLL=
ZLIB_CONFIG=
!ENDIF

!IFDEF C_ARES_PKG
!UNDEF ADNS_DIR
C_ARES_DIR=$(WIRESHARK_LIBS)\c-ares-$(C_ARES_PKG)-$(WIRESHARK_TARGET_PLATFORM)ws
C_ARES_CFLAGS=/I$(C_ARES_DIR)/include
C_ARES_LIBS=$(C_ARES_DIR)\lib\libcares-2.lib
C_ARES_DLL=$(C_ARES_DIR)\bin\libcares-2.dll
# Nmake uses carets to escape special characters
C_ARES_CONFIG=^#define HAVE_C_ARES 1
!else
C_ARES_CFLAGS=
C_ARES_LIBS=
C_ARES_CONFIG=
!IFDEF ADNS_DIR
ADNS_PATH=$(ADNS_DIR)\adns_win32\lib
ADNS_CFLAGS=/I$(ADNS_DIR)\src /I$(ADNS_DIR)\adns_win32
ADNS_LIBS=$(WIRESHARK_LIBS)\$(MSVC_VARIANT)\adns\adns_dll.lib
ADNS_DLL=$(WIRESHARK_LIBS)\$(MSVC_VARIANT)\adns\adns_dll.dll
# Nmake uses carets to escape special characters
ADNS_CONFIG=^#define HAVE_GNU_ADNS 1
!else
ADNS_CFLAGS=
ADNS_LIBS=
ADNS_CONFIG=
!ENDIF # ADNS
!ENDIF # C_ARES

!IFDEF KFW_DIR
KFW_PATH=$(KFW_DIR)\bin
KFW_CFLAGS=/I$(KFW_DIR)\include
KFW_LIBS=$(KFW_DIR)\lib\krb5_32.lib
# Nmake uses carets to escape special characters
KFW_CONFIG=^#define HAVE_MIT_KERBEROS 1
!else
KFW_CFLAGS=
KFW_LIBS=
KFW_CONFIG=
!ENDIF

!IFDEF PCRE_DIR
PCRE_PATH=$(PCRE_DIR)\bin
PCRE_CFLAGS=/I$(PCRE_DIR)\include
PCRE_LIBS=$(PCRE_DIR)\lib\pcre.lib
# Nmake uses carets to escape special characters
PCRE_CONFIG=^#define HAVE_LIBPCRE 1
!else
PCRE_CFLAGS=
PCRE_LIBS=
PCRE_CONFIG=
!ENDIF

!IFDEF NETTLE_DIR
NETTLE_CFLAGS=/I$(NETTLE_DIR)
NETTLE_LIBS=$(NETTLE_DIR)\libnettle.lib
# Nmake uses carets to escape special characters
NETTLE_CONFIG=^#define HAVE_LIBNETTLE 1
!else
NETTLE_CFLAGS=
NETTLE_LIBS=
NETTLE_CONFIG=
!ENDIF

!IFDEF GNUTLS_PKG
GNUTLS_DIR=$(WIRESHARK_LIBS)\gnutls-$(GNUTLS_PKG)-$(WIRESHARK_TARGET_PLATFORM)ws
GNUTLS_PATH=$(GNUTLS_DIR)
# /DNOCRYPT avoids inclusion of Wincrypt.h, avoiding a X509_NAME define clash
GNUTLS_CFLAGS=/I$(GNUTLS_DIR)\include /DNOCRYPT /DIMPORT_LIGNUTLSDLL
GCRYPT_LIBS = $(GNUTLS_DIR)\bin\libgcrypt-11.lib
GNUTLS_LIBS=\
	$(GNUTLS_DIR)\bin\libtasn1-3.lib	\
	$(GNUTLS_DIR)\bin\libgpg-error-0.lib	\
	$(GCRYPT_LIBS) \
	$(GNUTLS_DIR)\bin\libgnutls-26.lib
# Nmake uses carets to escape special characters
GNUTLS_CONFIG=^#define HAVE_LIBGNUTLS 1
LIBGCRYPT_CONFIG=^#define HAVE_LIBGCRYPT 1
!else
GNUTLS_CFLAGS=
GNUTLS_LIBS=
GNUTLS_CONFIG=
LIBGCRYPT_CONFIG=
!ENDIF

!IFDEF LUA_DIR
LUA_CFLAGS=/I$(LUA_DIR)\include
LUA_LIBS=$(LUA_DIR)\lua5.1.lib
# Nmake uses carets to escape special characters
LUA_CONFIG=^#define HAVE_LUA 1
LUA_VERSION=^#define HAVE_LUA_5_1 1
!else
LUA_CFLAGS=
LUA_LIBS=
LUA_CONFIG=
!ENDIF

!IF DEFINED(PYTHON_EMBED)
PYTHON_CFLAGS=/I$(PYTHON_DIR)\include
PYTHON_LIBS=$(PYTHON_DIR)\libs\python$(PYTHON_VER).lib
# Nmake uses carets to escape special characters
PYTHON_CONFIG=^#define HAVE_PYTHON 1
!else
PYTHON_CFLAGS=
PYTHON_LIBS=
PYTHON_CONFIG=
!ENDIF

!IFDEF PORTAUDIO_DIR
# Nmake uses carets to escape special characters
PORTAUDIO_CONFIG=^#define HAVE_LIBPORTAUDIO 1
!IF "$(PORTAUDIO_VERSION)" == "18"
# V18 uses API version 1 and v19 API version 2
PORTAUDIO_CFLAGS=/I$(PORTAUDIO_DIR)\pa_common
PORTAUDIO_API_CONFIG=^#define PORTAUDIO_API_1 1
!ELSE
PORTAUDIO_CFLAGS=/I$(PORTAUDIO_DIR)\include /I$(PORTAUDIO_DIR)\src\common /I$(PORTAUDIO_DIR)\src\os\win /DPA_NO_DS /DPA_NO_ASIO
!ENDIF
!ELSE
PORTAUDIO_CFLAGS=
PORTAUDIO_CONFIG=
!ENDIF

!IFDEF HHC_DIR
!IF "$(MSVC_VARIANT)" == "MSVC6"
HHC_CFLAGS=/I"$(HHC_DIR)\include" -DHHC_DIR
HHC_LIBS="$(HHC_DIR)\lib\htmlhelp.lib"
!ELSE
HHC_CFLAGS=-DHHC_DIR
HHC_LIBS=htmlhelp.lib
!ENDIF
!ELSE
HHC_CFLAGS=
HHC_LIBS=
!ENDIF

!IFDEF SMI_DIR
SMI_CONFIG=^#define HAVE_LIBSMI 1
SMI_CFLAGS=/I$(SMI_DIR)\include
SMI_LIBS=$(SMI_DIR)\lib\smi.lib
!ELSE
SMI_LIBS=
SMI_CFLAGS=
SMI_CONFIG=
!ENDIF

!IFDEF GEOIP_DIR
GEOIP_CONFIG=^#define HAVE_GEOIP 1
GEOIP_CFLAGS=/I$(GEOIP_DIR)
GEOIP_LIBS=$(GEOIP_DIR)\GeoIP.lib
!ELSE
GeoIP_LIBS=
GeoIP_CFLAGS=
GeoIP_CONFIG=
!ENDIF

!IFDEF ENABLE_LIBWIRESHARK
LIBWIRESHARK_CONFIG=^#define HAVE_LIBWIRESHARKDLL 1
# Link plugins with the import library of libwireshark.dll
LINK_PLUGINS_WITH_LIBWIRESHARK=USE
!ELSE
LIBWIRESHARK_CONFIG=
!ENDIF

# Construct the path
PATH=$(PATH);$(CYGWIN_PATH);$(GTK_DIR)\bin;$(GETTEXT_DIR)\bin;$(ZLIB_PATH);$(ADNS_PATH)

# We can't use a lot of IPv6 code with plain Visual C++ 6.0
!IF "$(MSVC_VARIANT)" == "MSVC6" && !DEFINED(MSSDK)
INET6_CONFIG=
!ELSE
INET6_CONFIG=^#define INET6 1
!ENDIF

!IF "$(MSVC_VARIANT)" == "MSVC6" && !DEFINED(MSSDK)
NTDDNDIS_CONFIG=
!ELSE
NTDDNDIS_CONFIG=^#define HAVE_NTDDNDIS_H 1
!ENDIF
