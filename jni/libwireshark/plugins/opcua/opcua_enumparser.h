/******************************************************************************
** $Id: opcua_enumparser.h 32577 2010-04-27 13:50:43Z morriss $
**
** Copyright (C) 2006-2009 ascolab GmbH. All Rights Reserved.
** Web: http://www.ascolab.com
**
** This program is free software; you can redistribute it and/or
** modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation; either version 2
** of the License, or (at your option) any later version.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** Project: OpcUa Wireshark Plugin
**
** Description: OpcUa Enum Type Parser
**
** This file was autogenerated on 31.03.2009.
** DON'T MODIFY THIS FILE!
** XXX - well, except that you may have to.  See the README.
**
******************************************************************************/

#include <glib.h>
#include <epan/packet.h>

void parseNodeIdType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseDialogConditionChoice(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseIdType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseNodeClass(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseMessageSecurityMode(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseUserTokenType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseApplicationType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseSecurityTokenRequestType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseComplianceLevel(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseAttributeWriteMask(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseNodeAttributesMask(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseEnumeratedTestType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseBrowseDirection(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseBrowseResultMask(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseFilterOperator(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseTimestampsToReturn(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseHistoryUpdateMode(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseMonitoringMode(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseDataChangeTrigger(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseDeadbandType(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseRedundancySupport(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseServerState(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseModelChangeStructureVerbMask(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void parseExceptionDeviationFormat(proto_tree *tree, tvbuff_t *tvb, gint *pOffset);
void registerEnumTypes(int proto);
